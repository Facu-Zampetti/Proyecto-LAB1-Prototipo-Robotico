//Librerias
#include <AFMotor.h>
#include <Servo.h>

//Inicializar pins de los motores
AF_DCMotor motor1(1, MOTOR12_1KHZ);
AF_DCMotor motor2(2, MOTOR34_1KHZ);
AF_DCMotor bomba(3, MOTOR34_1KHZ);
int valor;
int velocidad = 255;

//Inicializar servomotores
Servo servo1;
Servo servo2;
Servo servo3;
Servo servo4;
int angulo = 0;

//Inicializar pin del led
const int ledPin = 22;
const int ledPin2 = 23;
//Bandera del estado del led
bool parpadeo = false;
//Control del tiempo del parpadeo
unsigned long previoMilis = 0;
//Intervalo de parpadeo en milisegundos
const long intervalo = 500;

//Inicializar pin del buzzer
const int buzzerpin = 52; 
//Notas para la sirena
#define NOTE_B0  400
#define NOTE_C1  500
#define REST      0
//Melodia de la sirena
int tempo = 55;
int melody[] = {
  NOTE_B0, 8, NOTE_C1, 8, REST
};
int notes = sizeof(melody) / sizeof(melody[0]) / 2;
int wholenote = (60000 * 4) / tempo;
int noteDuration = 0;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void setup(){
  //Establece la velocidad en baudios (bits por segundo que se pueden transmitir del modulo bluetooth  
  Serial.begin(9600);
  Serial1.begin(9600);

  //Configuracion del led
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);
  pinMode(ledPin2, OUTPUT);
  digitalWrite(ledPin2, LOW);

  //Configuracion del buzzer
  pinMode(buzzerpin, OUTPUT);
  noTone(buzzerpin);

  //Inicializar pines de los servos
  servo1.attach(9);
  servo2.attach(10);
  servo3.attach(11);
  servo4.attach(12);

  //Valor inicial de los servos(0 grados)
  servo1.write(0); 
  servo2.write(0);
  servo3.write(0);
  servo4.write(0); 
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void playSiren() {
  for (int thisNote = 0; thisNote < notes * 2; thisNote += 2) {
    // Calcular la duracion de cada nota con el puntillo si es necesario
    noteDuration = wholenote / abs(melody[thisNote + 1]);
    if (melody[thisNote + 1] < 0) noteDuration *= 1.5;

    tone(buzzerpin, melody[thisNote], noteDuration * 0.9);
    delay(noteDuration);
  }
}

void blinkingLedOn(){
  if (parpadeo && millis() - previoMilis >= intervalo) {
    previoMilis = millis();
    //Alterna el estado de los leds
    digitalWrite(ledPin, !digitalRead(ledPin));
    digitalWrite(ledPin2, !digitalRead(ledPin2));
    playSiren();
  }
}  


void blinkingLedOff(){
  digitalWrite(ledPin, LOW);
  digitalWrite(ledPin2, LOW);
  noTone(buzzerpin);  
  parpadeo = false;
}

void forward(){
  motor1.setSpeed(velocidad);
  motor1.run(FORWARD); 
  motor2.setSpeed(velocidad);
  motor2.run(FORWARD); 
}
  
void back(){
  motor1.setSpeed(velocidad);
  motor1.run(BACKWARD); 
  motor2.setSpeed(velocidad);
  motor2.run(BACKWARD); 
}
  
void left(){
  motor1.setSpeed(velocidad);
  motor1.run(BACKWARD); 
  motor2.setSpeed(velocidad);
  motor2.run(FORWARD); 
}
  
void right(){
  motor1.setSpeed(velocidad);
  motor1.run(FORWARD); 
  motor2.setSpeed(velocidad);
  motor2.run(BACKWARD); 
}

void moveServos(int start, int end) {
  int step = (start < end) ? 1 : -1;
  for (angulo = start; angulo != end; angulo += step) {
    servo1.write(angulo);
    servo2.write(angulo);
    servo3.write(angulo);
    servo4.write(angulo);
    delay(15);
  }
}

void robotMode() {
  moveServos(0, 90);
}

void vehicleMode() {
  moveServos(90, 0);
}
  
void Stop(){
  motor1.setSpeed(0); 
  motor1.run(RELEASE); 
  motor2.setSpeed(0); 
  motor2.run(RELEASE); 
}

void startWater(){
  bomba.setSpeed(255); // Velocidad mÃ¡xima para la bomba
  bomba.run(FORWARD); // Enciende la bomba
  //digitalWrite(bombaPin, HIGH);
}

void endWater(){
  bomba.run(RELEASE); // Apaga la bomba
  //digitalWrite(bombaPin, LOW);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void loop(){
  if(Serial1.available() > 0){
    valor = Serial1.read();
    //Detiene los motores cuando se suelte el boton del control remoto
    Stop(); 
    
    //Condicionales para motores y led
    switch (valor) {
      
      case 'a':
        parpadeo = true;
        Serial.println("Prender Luz/Sirena");
        break;
      
      case 'b':
        blinkingLedOff();
        Serial.println("Apagar Luz/Sirena");
        break;
      
      case 'c':
        forward();
        Serial.println("Adelante");
        break;
      
      case 'd':
        back();
        Serial.println("Atras");
        break;
      
      case 'e':
        left();
        Serial.println("Izquierda");
        break;
      
      case 'f':
        right();
        Serial.println("Derecha");
        break;
      
      case 'g':
        robotMode();
        Serial.println("Transformar a Robot");
        break;
      
      case 'h':
        vehicleMode();
        Serial.println("Transformar a Tanque");
        break;
      
      case 'i':
        startWater();
        Serial.println("Encender bomba de agua");
        break;

      case 'j':
        endWater();
        Serial.println("Apagar bomba de agua");
        break;
      
      case 'k':
        Stop();
        Serial.println("Detener");
        break;
    }
  }
   if (parpadeo) {
    blinkingLedOn();
    playSiren(); 
  } 
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
